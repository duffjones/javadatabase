import java.util.Arrays;
import java.util.Random;
import java.io.Serializable;

class Row implements Serializable {

	private String[] field;
	private String key; 

	String[] field() {return field;}
	String key() {return key;}
	
	Row(String[] data) {
		field = data;
		key = genRandom();
	}
	
	Row() {
	}
	
	String getElement(int elementplace){
		return field[elementplace]; 
	}

	//Generates a random int for our Key, and converts it to a string. 
	String genRandom(){
		int rando = new Random().nextInt(01000000)+999999;
		String randomstr = Integer.toString(rando);
		  return randomstr;// or may be cache random instance
		}
	
	//Prints a Row with spacing/formatting. 
	void rowPrint() {
		for (int i = 0; i < field.length; i++) {
		System.out.printf(" %10s ", field[i]);
		}
		System.out.printf(" %10s ", key);

	}
	
	//counts elements in a Row. 
	int rowCount() {
		int count = field.length;
		return count;
	}

	//Replaces a single element in a row; 
	void rowChange(int element, String string) {
		field[element] = string;
	}

	
	 //-----------------------------------------------------------//
	//-------------------------TESTING---------------------------//
   //-----------------------------------------------------------//
	
	void testPrint(String[] row) {
		System.out.println("Test Print:" + Arrays.toString(row));
	}

	void testCreateRow() {
		String[] myStringArray = { "a", "b", "c" };
		Row newrow = new Row(myStringArray);
		System.out.println("Creating new row" + Arrays.toString(newrow.field));
		testPrint(newrow.field);
	}

	void test() {
		testCreateRow();
		testPrint(field);
	}

	void run(String[] args) {
		if (args.length == 0)
			test();
		else if (args.length >= 1) {
			System.out.println("creating record");
		}
	}

	public static void main(String[] args) {
		Row program = new Row();
		program.run(args);
	}
}
